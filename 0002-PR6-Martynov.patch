From 92a600da16a3bc1b857b4b724d61cba0584be2b9 Mon Sep 17 00:00:00 2001
From: Semen Martynov <semen.martynov@gmail.com>
Date: Sat, 23 Mar 2013 05:14:23 +0400
Subject: [PATCH] Home work 2

---
 drivers/Kconfig                         |    2 ++
 drivers/Makefile                        |    3 +++
 drivers/spbau/Kconfig                   |    7 +++++++
 drivers/spbau/Makefile                  |    1 +
 drivers/spbau/martynov/Kconfig          |    6 ++++++
 drivers/spbau/martynov/Makefile         |    1 +
 drivers/spbau/martynov/module-pr6.c     |   27 +++++++++++++++++++++++++++
 include/linux/spbau_lkpc_proc_counter.h |   22 ++++++++++++++++++++++
 kernel/exit.c                           |    7 +++++++
 kernel/fork.c                           |    8 ++++++++
 10 files changed, 84 insertions(+)
 create mode 100644 drivers/spbau/Kconfig
 create mode 100644 drivers/spbau/Makefile
 create mode 100644 drivers/spbau/martynov/Kconfig
 create mode 100644 drivers/spbau/martynov/Makefile
 create mode 100644 drivers/spbau/martynov/module-pr6.c
 create mode 100644 include/linux/spbau_lkpc_proc_counter.h

diff --git a/drivers/Kconfig b/drivers/Kconfig
index dbdefa3..ae256cb 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -1,5 +1,7 @@
 menu "Device Drivers"
 
+source "drivers/spbau/Kconfig"
+
 source "drivers/base/Kconfig"
 
 source "drivers/bus/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index a16a8d0..71cb9a7 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -5,6 +5,9 @@
 # Rewritten to use lists instead of if-statements.
 #
 
+# Modules for the Linux Kernel Programming Course at SPbAU
+obj-$(CONFIG_SPbAU_KERNEL)+= spbau/
+
 obj-y				+= irqchip/
 obj-y				+= bus/
 
diff --git a/drivers/spbau/Kconfig b/drivers/spbau/Kconfig
new file mode 100644
index 0000000..f6b572e
--- /dev/null
+++ b/drivers/spbau/Kconfig
@@ -0,0 +1,7 @@
+config SPbAU_KERNEL
+	bool "SPbAU PR modules"
+	default y
+	---help---
+	 Modules for the Linux Kernel Programming Course at the St. Petersburg Academic University of the Russian Academy of Sciences.
+
+source "drivers/spbau/martynov/Kconfig"
diff --git a/drivers/spbau/Makefile b/drivers/spbau/Makefile
new file mode 100644
index 0000000..20c48ea
--- /dev/null
+++ b/drivers/spbau/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_SPbAU_KERNEL) += martynov/
diff --git a/drivers/spbau/martynov/Kconfig b/drivers/spbau/martynov/Kconfig
new file mode 100644
index 0000000..a9b594b
--- /dev/null
+++ b/drivers/spbau/martynov/Kconfig
@@ -0,0 +1,6 @@
+config SPbAU_PR6
+	tristate "Show successfully created and stopped processes counters."
+	depends on SPbAU_KERNEL
+	default m
+	---help---
+	 Module prints information about quantity of successfully created (do_fork) and stopped (do_exit) of processes.
diff --git a/drivers/spbau/martynov/Makefile b/drivers/spbau/martynov/Makefile
new file mode 100644
index 0000000..dd2466c
--- /dev/null
+++ b/drivers/spbau/martynov/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_SPbAU_PR6) += module-pr6.o
diff --git a/drivers/spbau/martynov/module-pr6.c b/drivers/spbau/martynov/module-pr6.c
new file mode 100644
index 0000000..c4a2528
--- /dev/null
+++ b/drivers/spbau/martynov/module-pr6.c
@@ -0,0 +1,27 @@
+#include <linux/module.h>	// base
+#include <linux/kernel.h>	// printk()
+#include <linux/init.h>		// __init and __exit
+#include <linux/spbau_lkpc_proc_counter.h> // counters
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Semen Martynov <semen.martynov@gmail.com>");
+MODULE_DESCRIPTION("SPbAU: Linux Kernel Programming - task 06");
+MODULE_VERSION("1.0");
+
+void showCounters(void)
+{
+	extern struct spbau_lkpc_proc_counter proc_counter;
+	printk(KERN_INFO "From the moment of kernel loading:\n\t%u processes successfully created,\n\t%u processes successfully stopped.\n", proc_counter._do_fork_counter, proc_counter._do_exit_counter);
+}
+
+static int __init start(void)	// Entry point
+{
+	showCounters();		// Show counters data
+	return 0;			// successful result
+}
+static void __exit stop(void)	// Exit point
+{
+	showCounters();		// Show counters data
+}
+module_init(start);
+module_exit(stop);
diff --git a/include/linux/spbau_lkpc_proc_counter.h b/include/linux/spbau_lkpc_proc_counter.h
new file mode 100644
index 0000000..27e3204
--- /dev/null
+++ b/include/linux/spbau_lkpc_proc_counter.h
@@ -0,0 +1,22 @@
+#ifndef SPbAU_LKPC_PROC_COUNTER_H_
+#define SPbAU_LKPC_PROC_COUNTER_H_
+
+/**
+ * struct spbau_lkpc_proc_counter - stores information on quantity of
+ *                      successfully created (do_fork) and stopped
+ *                      (do_exit) of processes.
+ * @_do_fork_counter:	successfully created processes counter
+ * @_do_exit_counter:	successfully stopped processes counter
+ *
+ * This structure contains two fields which change at the time of
+ * successful creation of the new project, or at the time of a process
+ * stoping. Access to this field is provided from the special module
+ * which shows an information of counters.
+ */
+struct spbau_lkpc_proc_counter
+{
+	unsigned _do_fork_counter;
+	unsigned _do_exit_counter;
+};
+
+#endif /* SPbAU_LKPC_PROC_COUNTER_H_ */
diff --git a/kernel/exit.c b/kernel/exit.c
index 346616c..9fc0752 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -59,6 +59,8 @@
 #include <asm/pgtable.h>
 #include <asm/mmu_context.h>
 
+#include <linux/spbau_lkpc_proc_counter.h>
+
 static void exit_mm(struct task_struct * tsk);
 
 static void __unhash_process(struct task_struct *p, bool group_dead)
@@ -810,6 +812,7 @@ static inline void check_stack_usage(void) {}
 void do_exit(long code)
 {
 	struct task_struct *tsk = current;
+	extern struct spbau_lkpc_proc_counter proc_counter;
 	int group_dead;
 
 	profile_task_exit(tsk);
@@ -979,6 +982,10 @@ void do_exit(long code)
 	/* causes final put_task_struct in finish_task_switch(). */
 	tsk->state = TASK_DEAD;
 	tsk->flags |= PF_NOFREEZE;	/* tell freezer to ignore us */
+
+	// LKPC: Global processes counter
+	proc_counter._do_exit_counter++;
+
 	schedule();
 	BUG();
 	/* Avoid "noreturn function does return".  */
diff --git a/kernel/fork.c b/kernel/fork.c
index acc4cb6..d94166d 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -80,6 +80,8 @@
 
 #include <trace/events/sched.h>
 
+#include <linux/spbau_lkpc_proc_counter.h>
+
 #define CREATE_TRACE_POINTS
 #include <trace/events/task.h>
 
@@ -88,6 +90,8 @@
  */
 unsigned long total_forks;	/* Handle normal Linux uptimes. */
 int nr_threads;			/* The idle threads do not count.. */
+struct spbau_lkpc_proc_counter proc_counter = {0, 0};
+EXPORT_SYMBOL(proc_counter);
 
 int max_threads;		/* tunable limit on nr_threads */
 
@@ -1621,6 +1625,10 @@ long do_fork(unsigned long clone_flags,
 			if (!wait_for_vfork_done(p, &vfork))
 				ptrace_event(PTRACE_EVENT_VFORK_DONE, nr);
 		}
+
+		// LKPC: Global processes counter
+		proc_counter._do_fork_counter++;
+
 	} else {
 		nr = PTR_ERR(p);
 	}
-- 
1.7.10.4

